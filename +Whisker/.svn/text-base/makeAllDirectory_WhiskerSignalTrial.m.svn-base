function makeAllDirectory_WhiskerSignalTrial(d,varargin)
%
%
%
%   USAGE:
%
%
%   INPUTS:
%
%   d: Directory path name as string.
%
%
%   Optional parameter/value pair arguments:
%
%           'include_files': Optional cell array of strings giving file name prefixes
%                           of files in directory 'd' to process. Files will be processed
%                           in the order they are given within this cell array. *NOTE*: If
%                           this argument is not given, *all* '_WT.mat' files in directory
%                           'd' will be processed.
%
%           'ignore_files': Optional cell array of strings giving file name prefixes
%                           (i.e., file names without the '_WT.mat' suffix/extension) to ignore.
%                           Trumps 'include_files' argument.
%
%           'polyRoiInPix':
%               Sets arc-length limits (in pixels) on which to perform secondary curve fitting.
%               This argument can be given in two forms:
%               (1) an 1x2 vector that gives the ROI for *all* whiskers; or
%               (2) a cell array where first element is a vector of trajectory IDs
%                   (of length N) and subsequent elements comprise N 1x2 vectors
%                   giving ROIs for the trajectory IDs specified in the first
%                   element (respectively).
%               Limits are inclusive.
%
%           'barPosOffset': [xOffset yOffset].
%
%           'follicleExtrapDistInPix': Distance to extrapolate past the end of the tracked whisker
%                              in order to estimate follicle coordinates. If this argument is
%                              given, follicle position will be estimated. Default is not to estimate.
%                              Presently can only give one value, which will be used for all TIDs. Need to
%                              improve this.
%
%           'polyFitsMask': [xpoints; ypoints]. See Whisker.WhiskerSignalTrial polyFitsMask property.
%
%
%   DESCRIPTION:
%
%   Requires WhiskerTrial objects to be saved, as .mat files, in the
%   directory specified by argument 'd'.  These files are read in one at a time and
%   converted to WhiskerSignalTrial objects, which are then saved to disk in the same directory
%   as .mat files with a '_WST.mat' suffix/extension.
%
%   Processes all trajectory IDs within each WhiskerTrial.
%
%
% 3/10, DHO.
%

p = inputParser;

p.addRequired('d', @ischar);
p.addParamValue('include_files', {}, @(x) all(cellfun(@ischar,x)));
p.addParamValue('ignore_files', {}, @(x) all(cellfun(@ischar,x)));
p.addParamValue('polyRoiInPix', [0 200], @(x) numel(x)==2 && x(1)>=0);
p.addParamValue('barPosOffset', [0 0], @(x) numel(x)==2);
p.addParamValue('follicleExtrapDistInPix', NaN, @isnumeric);
p.addParamValue('polyFitsMask', [], @isnumeric );

p.parse(d,varargin{:});

disp 'List of all arguments:'
disp(p.Results)


if ~strcmp(d(end), filesep)
    d = [d filesep];
end

currentDir = pwd;
cd(d)

fnall = arrayfun(@(x) x.name(1:(end-7)), dir([d '*_WT.mat']),'UniformOutput',false);

if ~isempty(p.Results.include_files) % Make sure files are found. If not, ignored.
    ind = ismember(p.Results.include_files,fnall);
    fnall = p.Results.include_files(ind);
    if sum(ind) ~= numel(ind)
        disp('The following files in ''include_files'' were not found in directory ''d'' and will be skipped:')
        disp(p.Results.include_files(~ind))
    end
end

if ~isempty(p.Results.ignore_files)
    ind = ~ismember(fnall,p.Results.ignore_files);
    fnall = fnall(ind);
end

inBoth = intersect(p.Results.include_files,p.Results.ignore_files);
if ~isempty(inBoth)
    disp('The following files were given in BOTH ''include_files'' and ''ignore files'' and will be ignored:')
    disp(inBoth)
end

nfiles = length(fnall);

if ~isempty(fnall)
    if exist('parfor','builtin') % Parallel Computing Toolbox is installed
        parfor k=1:nfiles
            fn = fnall{k};
            disp(['Processing ''_WT.mat'' file '  fn ', ' int2str(k) ' of ' int2str(nfiles)])
            
            w = pctload([fn '_WT.mat']);
            
            ws = Whisker.WhiskerSignalTrial(w,'polyRoiInPix',p.Results.polyRoiInPix);
            if ~isempty(p.Results.polyFitsMask)
                x = p.Results.polyFitsMask(1,:);
                y = p.Results.polyFitsMask(2,:);
                tidList = ws.trajectoryIDs;
                for tid=tidList
                    ws.set_mask_from_points(tid,x,y);
                end
            end
            
            if ~isnan(p.Results.follicleExtrapDistInPix)
                ws.recompute_cached_follicle_coords(p.Results.follicleExtrapDistInPix,ws.trajectoryIDs); % Right now fits even "contact detection" tids, need to change format***
            end
            
            outfn = [fn '_WST.mat'];
            
            pctsave(outfn,ws)
        end
    else
        for k=1:nfiles
            fn = fnall{k};
            disp(['Processing ''_WT.mat'' file '  fn ', ' int2str(k) ' of ' int2str(nfiles)])
            
            load([fn '_WT.mat'],'w');
            ws = Whisker.WhiskerSignalTrial(w,'polyRoiInPix',p.Results.polyRoiInPix);
            if ~isempty(p.Results.polyFitsMask)
                x = p.Results.polyFitsMask(1,:);
                y = p.Results.polyFitsMask(2,:);
                tidList = ws.trajectoryIDs;
                for tid=tidList
                    ws.set_mask_from_points(tid,x,y);
                end
            end
            
            if ~isnan(p.Results.follicleExtrapDistInPix)
                ws.recompute_cached_follicle_coords(p.Results.follicleExtrapDistInPix,ws.trajectoryIDs); % Right now fits even "contact detection" tids, need to change format***
            end
            
            outfn = [fn '_WST.mat'];
            
            save(outfn,'ws');
        end
    end
end

cd(currentDir)
end

function pctsave(outfn,ws)
save(outfn,'ws');
end

function w = pctload(fn)
load(fn,'w');
end






